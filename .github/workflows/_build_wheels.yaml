name: Reusable workflow example

on:
  workflow_call:

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: windows-latest, cibw_arch: AMD64, cibw_build: "*[02468]-* *[02468]t-*" }
          - { os: windows-latest, cibw_arch: AMD64, cibw_build: "*[13579]-* *[13579]t-*" }

          - { os: ubuntu-latest, cibw_arch: x86_64, cibw_build: "*[02468]-* *[02468]t-*" }
          - { os: ubuntu-latest, cibw_arch: x86_64, cibw_build: "*[13579]-* *[13579]t-*" }

    steps:
      - uses: actions/checkout@v4

      - name: Restore cached Primes
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pypa\cibuildwheel\Cache
            ~/Library/Caches/cibuildwheel
            ~/.cache/cibuildwheel
          key: 'cibuildwheel-${{ runner.os }}-${{ matrix.cibw_arch }}-${{ matrix.cibw_build }}'
          restore-keys: |
            cibuildwheel-${{ runner.os }}-${{ matrix.cibw_arch }}

      - uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_BEFORE_TEST: pip install -r requirements.txt
          CIBW_TEST_COMMAND: "pytest {project}/tests --assert-pkg-compiled=true"

      - run: ls ./wheelhouse/

      - uses: actions/upload-artifact@v4
        with:
          name: 'wheels-${{ runner.os }}-${{ matrix.arch }}-${{ strategy.job-index }}'
          path: ./wheelhouse/*.whl

  build:
    name: make pure python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: pipx install 'flit>3,<4'

      - run: flit build --format=wheel

      - uses: actions/upload-artifact@v4
        with:
          name: 'wheels-pure-py'
          path: dist/*
